/*
 *  Copyright 2022 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
shader displace_Vector
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Generates a <b>DeltaP</b> (Vector Displacement) "
            "output from a <b>Vector</b> valued input. "
    ]],

    vector Vector = vector(0.0)
    [[
        string label = "Vector",
        string help =
            "The surface is offset directly by the <b>Vector</b> value: "
            "P += <b>Vector</b>. "
            "<br/>"
            "The <b>Vector</b> is assumed to contain values whose lengths "
            "range between 0 and 1. "
    ]],

    float Magnitude = 0.5
    [[
        string label = "Magnitude",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string help =
            "Controls the <b>Magnitude</b> of the displacement. "
    ]],

    string MagnitudeSpace = "world"
    [[
        int connectable = 0,
        string label = "Magnitude Space",
        string widget = "popup", int editable = 1,
        string options =
            "object"
            "|world",
        string help =
            "Determines in what <b>Space</b> the units of <b>Magnitude</b> are specified: "
            "how big is 1 unit of <b>Magnitude</b> displacement?"
    ]],

    int Invert = 0
    [[
        int connectable = 0,
        string label = "Invert",
        string widget = "checkBox",
        string help =
            "<b>Invert</b> the displaced variation. "
    ]],

    output vector DeltaP = vector(0.0)
)
{
    // Invert?
    vector  deltaP = Vector;
    if( Invert ) deltaP = -deltaP;

    // Apply the Magnitude.
    deltaP *= Magnitude;

    // Scale to common space.
    matrix  mag_to_common;
    if( getmatrix( MagnitudeSpace, "common", mag_to_common ))
    {
        deltaP *= pow( abs( determinant( mag_to_common )), 0.33333333 );
    }
    else
    {
        warning(
            "Magnitude Space = \"%s\" couldn't be found. "
            "Using \"common\" space instead - that's not good. ",
            MagnitudeSpace
            );
    }

    // The change in the surface.
    DeltaP = deltaP;
}
