/*
 *  Copyright 2022 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
shader pattern_Noise
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Produces a pattern of the selected <b>Noise Type</b>. "
    ]],

    point Space = point(0.0)
    [[
        string help =
            "When connected, defines the <b>Space</b> "
            "in which the pattern is generated. "
            "<p>"
            "Otherwise, will use the <tt>__Pref</tt> primvar "
            "values if they exist, or object space if they do not. "
            "</p>"
    ]],

    float Size = 1.0
    [[
        int slider = 1, float slidermin = 0.1, float slidercenter = 1.0, float slidermax = 10.0,
        string help =
            "Controls the <b>Size</b> of the pattern variation. "
    ]],

    string Type = "uperlin"
    [[
        int connectable = 0,
        string widget = "mapper",
        string options = "Perlin:uperlin|Simplex:usimplex|Cell:cell",
        string help =
            "Selects whether <i>Perlin</i>, <i>Simplex</i>, or <i>Cell</i> noise is used. "
    ]],

    float Variation = 0.0
    [[
        int slider = 1, float slidermin = 0.0, float slidermax = 10.0,
        string help =
            "This varies the result without changing any of its fundamental "
            "characteristics. Can be used to animate the resulting pattern, "
            "or just produce a different variant of it. "
    ]],

    output float  Float = 0.0,
    output color  Gray = color(0.0),
    output color  Color = color(0.0),
    output point  Point = point(0.0),
    output vector Vector = vector(0.0),
    output normal Normal = normal(0.0)
)
{
    // Pattern generation space.
    point  Q = Space;

    if( !isconnected( Space ))
    {
        Q = P;
        getattribute( "primvar", "__Pref", Q );
        Q = transform( "common", "object", Q );
    }

    // Size scaling.
    Q /= max( 1.0e-6, Size );

    // Compute the pattern.
    Color = noise( Type, Q, Variation );

    // Set the outputs.
    Float = Color.r;
    Gray = color( Float );
    Point = point( Color );
    Vector = vector( 2.0*Color - color(1.0) );
    Normal = normalize( Vector );
}
